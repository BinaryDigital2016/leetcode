package search

/*
给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。

请你统计并返回 grid 中 负数 的数目。



示例 1：

输入：grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
输出：8
解释：矩阵中共有 8 个负数。

示例 2：

输入：grid = [[3,2],[1,0]]
输出：0

示例 3：

输入：grid = [[1,-1],[-1,-1]]
输出：3

示例 4：

输入：grid = [[-1]]
输出：1
*/

/*
   [4,3,2,-1],
   [3,2,1,-1],
   [1,1,-1,-2],
   [-1,-1,-2,-3]
   从右上角开始遍历，i = 0, j = grid[0].length - 1
   如果当前值大于等于 0，那么前面的值肯定都非负，那么直接跳过，进入下一行, 即 i++
   如果当前值小于 0，那么当前值以及同列下的值都是小于 0 的，那么直接添加，然后进行下一列，即 j--
*/
func countNegatives(grid [][]int) int {
	m := len(grid)
	if m == 0 {
		return 0
	}
	n := len(grid[0])
	i, j := 0, n-1 //从右上角开始,因为最小

	count := 0
	for i < m && j >= 0 {
		if grid[i][j] < 0 {
			count += m - i //该列下面所有行都是负数
			j--
		} else {
			i++ //判断该列下一行
		}
	}
	return count
}
