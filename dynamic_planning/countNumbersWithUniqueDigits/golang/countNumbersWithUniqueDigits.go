package dp

/*
给定一个非负整数 n，计算各位数字都不同的数字 x 的个数，其中 0 ≤ x < 10n 。

示例:

输入: 2
输出: 91
解释: 答案应为除去 11,22,33,44,55,66,77,88,99 外，在 [0,100) 区间内的所有数字。
*/

//一位数  0-9 一共10种
//两位数  就是从0-9选两个数字，有10*9种选法(第一位选0~9，第二位选0~9中除第一位已选的数字) 减去0开头非法二位数的9种  一共10*9-9种
//三位数 就是从0-9选三个个数字，有10*9*8种选法(第一位选0~9，第二位选0~9中除第一位已选的数字，第三位选0~9中除第一位和第二位已选的数字) 减去0开头非法三位数的9*8种  一共10*9*8-9*8=9*9*8种
func countNumbersWithUniqueDigits(n int) int {
	if n == 0 {
		return 1
	}
	if n == 1 {
		return 10
	}
	curTotal := 10  //从0-9中选i个数的种类（包括0开头）
	curIllegal := 1 //从0-9中选i个数的非法数字（0开头）
	sum := 10
	for i := 1; i < n; i++ {
		curTotal = curTotal * (10 - i)
		curIllegal = curIllegal * (10 - i)
		sum += curTotal - curIllegal
	}
	return sum
}
