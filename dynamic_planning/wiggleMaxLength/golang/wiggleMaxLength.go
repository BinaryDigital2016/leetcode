package dp

/*
如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。

例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。

给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。

示例 1:

输入: [1,7,4,9,2,5]
输出: 6
解释: 整个序列均为摆动序列。

示例 2:

输入: [1,17,5,10,13,15,10,5,16,8]
输出: 7
解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。

示例 3:

输入: [1,2,3,4,5,6,7,8,9]
输出: 2
*/

/*
为了更好地理解这一方法，用两个数组来 dp ，分别记作 upupup 和 downdowndown 。

每当我们选择一个元素作为摆动序列的一部分时，这个元素要么是上升的，要么是下降的，这取决于前一个元素的大小。

up[i]up[i]up[i] 存的是目前为止最长的以第 iii 个元素结尾的上升摆动序列的长度。

类似的， down[i]down[i]down[i] 记录的是目前为止最长的以第 iii 个元素结尾的下降摆动序列的长度。

我们每当找到将第 iii 个元素作为上升摆动序列的尾部的时候就更新 up[i]up[i]up[i] 。现在我们考虑如何更新 up[i]up[i]up[i] ，我们需要考虑前面所有的降序结尾摆动序列，也就是找到 down[j]down[j]down[j] ，满足 j<ij < ij<i 且 nums[i]>nums[j]nums[i] >nums[j]nums[i]>nums[j] 。类似的， down[i]down[i]down[i] 也会被更新。
*/
func wiggleMaxLength(nums []int) int {
	n := len(nums)
	if n < 1 {
		return n
	}
	up := make([]int, n)
	down := make([]int, n)
	for i := 1; i < n; i++ {
		for j := 0; j < i; j++ {
			if nums[i] > nums[j] {
				up[i] = max(up[i], down[j]+1)
			} else if nums[i] < nums[j] {
				down[i] = max(down[i], up[j]+1)
			}
		}
	}
	return 1 + max(up[n-1], down[n-1])
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
