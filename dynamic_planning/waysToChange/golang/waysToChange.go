package dp

/*
硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。(结果可能会很大，你需要将结果模上1000000007)

示例1:

 输入: n = 5
 输出：2
 解释: 有两种方式可以凑成总金额:
5=5
5=1+1+1+1+1

示例2:

 输入: n = 10
 输出：4
 解释: 有四种方式可以凑成总金额:
10=10
10=5+5
10=5+1+1+1+1+1
10=1+1+1+1+1+1+1+1+1+1

说明：

注意:

你可以假设：

    0 <= n (总金额) <= 1000000
*/

/*
类似于多重背包，硬币无限个，dp[i][j]表示加入第i种硬币时硬币总数为j的表示法数，那么对于每种硬币(假设第i种硬币的价值为v[i])而言，状态转移方程就为dp[i][j] = dp[i-1][j] + dp[i][j-v[i]]。表示当前方法数可以由之前所有i-1种硬币的方法数加上放第i种硬币的方法数得到。
*/
func waysToChange(n int) int {
	dp := make([][]int, 4) //dp[i][j]为遍历到当下这个硬币时，组成金额 j 的方法数目
	dp[0] = make([]int, n+1)
	for i := 0; i <= n; i++ {
		dp[0][i] = 1
	}
	for i := 1; i < 4; i++ {
		dp[i] = make([]int, n+1)
		dp[i][0] = 1
	}
	coins := []int{1, 5, 10, 25}
	for i := 1; i < 4; i++ {
		for j := 1; j <= n; j++ {
			if j >= coins[i] {
				dp[i][j] = (dp[i-1][j] + dp[i][j-coins[i]]) % 1000000007
			} else {
				dp[i][j] = dp[i-1][j]
			}
		}
	}
	return dp[3][n]
}
